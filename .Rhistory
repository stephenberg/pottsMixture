int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}'
)
library(Rcpp)
library(RcppEigen)
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}'
)
install.packages("Rtools")
install.packages("RTools")
install.packages("RBuildTools")
install.packages("RBuildtools")
devtools::find_rtools()
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
library(installr)
install.packages("installr")
install.Rtools
library(installr)
install.rtools()
library(pkgbuild)
install.rtools()
installr::install.rtools()
install.packages("pkgbuild") # pkgbuild is not available (for R version 3.5.0)
install.packages("devtools") # make sure you have the latest version from CRAN
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
install.packages("pkgbuild")
install.packages("pkgbuild") # pkgbuild is not available (for R version 3.5.0)
install.packages("devtools") # make sure you have the latest version from CRAN
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
library(pkgbuild
)
find_rtools()
installr::install.rtools()
find_rtools()
devtools::find_rtools()
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools() # is TRUE now
devtools::install_github("r-lib/devtools")
find_rtools()
installr::install.rtools()
library(devtools)
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
find_rtools() # is TRUE now
install.packages("devtools")
install.packages("devtools")
installr::install.rtools()
find_rtools
find_rtools()
devtools::find_rtools()
library(Rcpp)
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}'
)
install.Rtools()
install.Rtools()
library(installr)
install.Rtools()
install.packages("Rtools")
find_rtools()
library(devtools)
find_rtools()
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}'
)
Sys.getenv()
install.packages("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
library(pkgbuild)
find_rtools()
help("find_rtools")
rtools_path()
install.packages("pkgbuild")
install.packages("pkgbuild")
rtools_path()
library(devtools)
library(pkgbuild)
rtools_path()
find_rtools()
assignInNamespace("version_info", c(devtools:::version_info, list("3.5" = list(version_min = "3.3.0", version_max = "99.99.99", path = "bin"))), "devtools")
73.1*5+122.32*5+138.06*5+61.94*5
(73.1*5+122.32*5+138.06*5+61.94*5)
(73.1*5+122.32*5+138.06*5+61.94*5)/20
(73.1*5+122.32*5+138.06*5+61.94*5)/20
(73.1*5+122.32*5+138.06*5+61.94*5)
(73.1*5+122.32*5+138.06*5+61.94*5)+1261.485
(73.1*5+122.32*5+138.06*5+61.94*5)+1261.485
(135.3+143.7+129.8+148.5)/4
x0=(135.3+143.7+129.8+148.5)/4
x=c(135.3,143.7,129.8,148.5)
x-x0
sum((x-x0)^2)*6
1261.485/3
1977.1/20
420.495/98.855
pf(4.25,3,20)
1-pf(4.25,3,20)
x=c(0.36,0.28,0.45,0.30,0.54,0.39,0.30,0.42)
x
y=c(0.25,0.27,0.22,0.25,0.17)
y=c(0.25,0.27,0.22,0.25,0.17,0.24,0.28,0.21)
lm(y~x)
fit=lm(y~x)
confint(fit)
pt(0.975,2)*0.0500
summary(fit)
-0.379/0.04989
0.04989*pt(0.975,6)
0.04989*pt(0.975,6)
-0.379+0.04989*pt(0.975,6)
-0.379-0.04989*pt(0.975,6)
-0.379-0.04989*qt(0.975,6)
-0.379+0.04989*qt(0.975,6)
predict(fit,newdata=data.frame(0.4),interval="confidence")
data=data.frame(x=x,y=y)
data
fitlm(y~x,data=data)
fit=lm(y~x,data=data)
fit
predict(fit,newdata=data.frame(x=0.4),interval="confidence")
0.2286688-0.2182216
2.447*0.004
2.447*0.00427
mean(x)
mean(y)
predict(fit,newdata=data.frame(x=0.4),interval="predict")
0.2592-0.2286688
1-pf(4.25,3,20)
1-pf(4.254,3,20)
x=c(0.36,0.28,0.45,0.30,0.54,0.39,0.30,0.42)
mean(x)
y=c(0.25,0.27,0.22,0.25,0.17,0.24,0.28,0.21)
lm(y~x)
mean(y)
0.25-mean(y)
(0.25-mean(y))/0.0554
-0.02*(0.25-mean(y))/0.0554
2.12*sqrt(232/16*2/5)=
2.12*sqrt(232/16*2/5)
qt(1-0.05/6,16)*sqrt(232/16*2/5)
x=c(.36, .28, .45, .30, .54, .39, .30, .42)
y=c(.25, .27, .22, .25, .17, .24, .28, .21)
fit=lm(y~x)
beta0hat=fit$coefficients[1]
beta1hat=fit$coefficients[2]
yhat=beta0hat+beta1hat*x
SSerr=sum((y-yhat)^2)
MSerr=SSerr/(8-2)
summary(aov(fit)) #for comparison
x=c(.36, .28, .45, .30, .54, .39, .30, .42)
y=c(.25, .27, .22, .25, .17, .24, .28, .21)
fit=lm(y~x)
beta0hat=fit$coefficients[1]
beta1hat=fit$coefficients[2]
yhat=beta0hat+beta1hat*x
SSerr=sum((y-yhat)^2)
MSerr=SSerr/(8-2)
summary(aov(fit)) #for comparison
sqrt(0.000138)
summary(fit)
watermelon=read.table("C:/Users/Stephen Berg/Dropbox/Stat 571/RStudioIntro/RcmdrNotes/watermelon.txt",
header=TRUE)
boxplot(weight~variety,data=watermelon)
library(car)
leveneTest(weight~variety,data=watermelon)
#the x argument contains the measurements (the weights of each watermelon)
#the g argument contains the grouping (the watermelon variety for each weight)
pairwise.t.test(x=watermelon$weight,g=watermelon$variety,p.adjust.method = "none")
pairwise.t.test(x=watermelon$weight,g=watermelon$variety,p.adjust.method = "bonf")
#"fit" will contain an anova model fit by aov()
fit=aov(weight~variety,data=watermelon)
#the summary function prints out a nice anova table
summary(fit)
pairwise.t.test(x=watermelon$weight,g=watermelon$variety,p.adjust.method = "none")
varC=watermelon$weight[watermelon$variety=="C"]
varD=watermelon$weight[watermelon$variety=="D"]
t.test(varC,varD,var.equal = TRUE)
#"fit" will contain an anova model fit by aov()
fit=aov(weight~variety,data=watermelon)
#compute Tukey HSD's
TukeyHSD(fit)
library(multcomp)
#"fit" will contain an anova model fit by aov()
fit=aov(weight~variety,data=watermelon)
fit
summary(fit)
fit
summary(fit)
sqrt(14.5*2/5)*qt(0.975,16)
sqrt(14.5*2/5)*qt(1-0.05/(2*6),16)
sqrt(14.5*2/5)*qt(1-0.05/(2*12),16)
sqrt(14.5*1/5)*qtukey(0.95,4,16)
grades=read.table("C:/Users/Stephen Berg/Downloads/2018-12-14T1247_Grades-FA18_STAT_571_001.csv")
grades=read.table("C:/Users/Stephen Berg/Downloads/2018-12-14T1247_Grades-FA18_STAT_571_001.csv",header=TRUE)
grades
232/16
sqrt(14.5)
sqrt(14.5*0.4)
qtukey(0.95,4,16)*sqrt(14.5*1/5)
qtukey(0.95,4,16)*sqrt(14.5*1/5)
3.8+qtukey(0.95,4,16)*sqrt(14.5*1/5)
p1=diag(3)
p2=cbind(c(0,1,0),c(1,0,0),c(0,0,1))
p3=cbind(c(1,0,0),c(0,0,1),c(0,1,0))
p1
p1%*%p2%*%p3
comp=p1%*%p1%*%p3
comp
comp=p1%*%p2%*%p3
comp
comp=p1%*%p3%*%p2
comp
eigen(comp)
comp%*%comp%*%comp%*%comp
comp%*%comp%*%comp%*%comp%*%comp
comp%*%comp%*%comp%*%comp%*%comp%*%comp
comp%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp
p1
p2
p3
x=c(1,0,0)
t(x)%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp
t(x)%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp
t(x)%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp%*%comp
p1%*%p3%*%p2
comp
t(x)%*%p1
t(x)%*%p1%*%p3
t(x)%*%p1%*%p3%*%p2
t(x)%*%p1%*%p3%*%p2%*%p1
t(x)%*%p1%*%p3%*%p2%*%p1%*%p3
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv")
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv",header=TRUE)
grades
assignments=grades$Assignments.Current.Score
mid1=grades$Midterm.1.Current.Score
mid1
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv")
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
finalExam
mid1
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv")
mid1=grades$Midterm.1..425501.
mid1
mid2
finalExam
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv")
grades
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv",header=TRUE)
grades$Assignments.Current.Score
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
length(homework)
length(mid1)
mid1
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv",header=TRUE)
homework=grades$Assignments.Current.Score
mid1=grades$Midterm.1..425501.
mid2=grades$Midterm.2..435818.
finalExam=grades$Final.exam
length(homework)
length(mid1)
length(mid2)
length(finalExam)
homework
mid1
mid2
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv",header=TRUE)
homework=grades$Assignments.Current.Score
mid1=grades$Midterm.1..425501.
mid2=grades$Midterm.2..435818.
finalExam=grades$Final.exam
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
mid1
mid2
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
length(homework)
length(mid1)
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
finalPercent
finalPercent[order(finalPercent)]
hist(finalPercent)
grades$X
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
names
names[finalPercent<60]
finalPercent
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
names[finalPercent<65]
names[finalPercent<60]
names[finalPercent<70]
names[finalPercent<65]
names[finalPercent<60]
names[finalPercent<62]
names[finalPercent<63]
names[finalPercent<64]
names[finalPercent<65]
names[finalPercent<60]
finalPercent[finalPercent<60]
mean(finalExam)
mean(finalExam/66)
finalPercent
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
z
z<-1.645
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
sum(z<-1.645)
sum(z<(-1.645))
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
z
names(z<(-1.645))
names[z<(-1.645)]
percent[z<(-1.645)]
finalPercent[z<(-1.645)]
finalPercent[z<(-1.644)]
finalPercent[z<(-1.64)]
finalPercent[z<(-1.6)]
finalPercent[z<(-1.5)]
finalPercent[z<(-1.66)]
finalPercent[z<(-1.68)]
finalPercent[z<(-1.7)]
finalPercent[z<(-1.8)]
finalPercent[z<(-2)]
finalPercent<70
sum(finalPercent<70)
summary(finalExam/66*100)
summary(finalPercent)
sum(finalPercent>86)
sum(finalPercent>85)
sum(finalPercent>84)
sum(finalPercent>84.5)
sum(finalPercent>84.7)
sum(finalPercent>84.8)
finalPercent>77
sum(finalPercent>77)
sum((finalPercent>77) & (finalPercent<84))
sum((finalPercent>77) & (finalPercent<85))
sum((finalPercent>77) & (finalPercent<84.8))
sum((finalPercent>77) & (finalPercent<84.7))
library(dlstats)
ls()
dlstats::cran_stats("automultinomial")
test=dlstats::cran_stats("automultinomial")
test
test$downloads
plot(test$downloads)
test$downloads[27]
test$downloads[27]=test$downloads[27]*2
plot(test$downloads)
setwd("C:/Users/Stephen Berg/Dropbox/Research - Berg/pottsHess/pottsUtilities/")
devtools::check()
devtools::install()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rtools")
install.packages("RTools")
install.packages("RcppEigen")
getwd()
setwd("../pottsMixture/")
devtools::build()
devtools::install()
install.packages("igraph")
devtools::install()
library(pottsMixture)
library(pottsMixture)
devtools::build()
devtools::install()
install.packages("devtools")
install.packages("devtools")
getwd()
devtools::check()
library(data.table)
devtools::check()
library(pottsMixture)
library(pottsMixture)
library(pottsMixture)
devtools::install()
library(pottsMixture)
devtools::install()
install.packages("Rtools")
library(devtools)
build_github_devtools()
install.packages("rtools")
find_rtools()
install()
library(pottsMixture)
devtools::install()
devtools::install()
devtools::check()
install.packages("data.table")
install.packages("data.table")
devtools::install()
library(pottsMixture)
install()
install
devtools::build()
devtools::install()
library(pottsMixture)
R.home("bin")
normalizePath(R.home("bin"))
R.home("bin")
Sys.getenv("R_HOME")
shortPathName(R.home("bin"))
library(devtools)
debug(system)
install()
getwd()
R_system_version()
version
install.packages("devtools")
install.packages("Rcpp")
install.packages("RcppEigen")
install.packages("permute")
install.packages("pkgbuild")
install.packages("pkgbuild")
install.packages("devtools")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
install.packages("backports")
install.packages("backports")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
install.packages("processx")
install.packages("processx")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
install.packages("ps")
install.packages("ps")
install.packages("R6")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
library(pkgbuild)
find_rtools()
install.packages("pkgbuild") # pkgbuild is not available (for R version 3.5.0)
install.packages("devtools") # make sure you have the latest version from CRAN
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
library(pkgbuild) # load package
find_rtools()
remove.packages("devtools")
install.packages("pkgbuild")
install.packages("pkgbuild")
devtools::install_github("r-lib/pkgbuild")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
install.packages("devtools") # make sure you have the latest version from CRAN
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
unload("devtools")
library(pkgbuild)
find_rtools()
devtools::build()
library(devtools)
library(pkgbuild)
devtools::build()
library(pkgbuild)
find_rtools()
pkgbuild::build()
library(devtools)
find_rtools(debug = TRUE)
devtools::build()
devtools::build()
install.packages("pkgbuild","G:/Program Files/R/R-3.5.1/library") # pkgbuild is not available (for R version 3.5.0)
install.packages("devtools","G:/Program Files/R/R-3.5.1/library") # make sure you have the latest version from CRAN
library(devtools, lib.loc="G:/Program Files/R/R-3.5.1/library") # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
library(pkgbuild, lib.loc = "G:/Program Files/R/R-3.5.1/library") # load package
find_rtools() # should be TRUE, assuming you have Rtools 3.5
install.packages("pkgbuild", "G:/Program Files/R/R-3.5.1/library")
pkgbuild::find_rtools()
pkgbuild::find_rtools(debug="FALSE")
pkgbuild::find_rtools()
pkgbuild::build()
Sys.getenv("PATH")
