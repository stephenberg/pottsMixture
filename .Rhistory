source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
length(homework)
length(mid1)
mid1
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv",header=TRUE)
homework=grades$Assignments.Current.Score
mid1=grades$Midterm.1..425501.
mid2=grades$Midterm.2..435818.
finalExam=grades$Final.exam
length(homework)
length(mid1)
length(mid2)
length(finalExam)
homework
mid1
mid2
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
grades=read.csv("C:/Users/Stephen Berg/Dropbox/Stat 571/gradesLec001.csv",header=TRUE)
homework=grades$Assignments.Current.Score
mid1=grades$Midterm.1..425501.
mid2=grades$Midterm.2..435818.
finalExam=grades$Final.exam
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
mid1
mid2
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
length(homework)
length(mid1)
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
homework
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
finalPercent
finalPercent[order(finalPercent)]
hist(finalPercent)
grades$X
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
names
names[finalPercent<60]
finalPercent
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
names[finalPercent<65]
names[finalPercent<60]
names[finalPercent<70]
names[finalPercent<65]
names[finalPercent<60]
names[finalPercent<62]
names[finalPercent<63]
names[finalPercent<64]
names[finalPercent<65]
names[finalPercent<60]
finalPercent[finalPercent<60]
mean(finalExam)
mean(finalExam/66)
finalPercent
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
z
z<-1.645
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
sum(z<-1.645)
sum(z<(-1.645))
source('C:/Users/Stephen Berg/Dropbox/Stat 571/gradeScript.R', echo=TRUE)
z
names(z<(-1.645))
names[z<(-1.645)]
percent[z<(-1.645)]
finalPercent[z<(-1.645)]
finalPercent[z<(-1.644)]
finalPercent[z<(-1.64)]
finalPercent[z<(-1.6)]
finalPercent[z<(-1.5)]
finalPercent[z<(-1.66)]
finalPercent[z<(-1.68)]
finalPercent[z<(-1.7)]
finalPercent[z<(-1.8)]
finalPercent[z<(-2)]
finalPercent<70
sum(finalPercent<70)
summary(finalExam/66*100)
summary(finalPercent)
sum(finalPercent>86)
sum(finalPercent>85)
sum(finalPercent>84)
sum(finalPercent>84.5)
sum(finalPercent>84.7)
sum(finalPercent>84.8)
finalPercent>77
sum(finalPercent>77)
sum((finalPercent>77) & (finalPercent<84))
sum((finalPercent>77) & (finalPercent<85))
sum((finalPercent>77) & (finalPercent<84.8))
sum((finalPercent>77) & (finalPercent<84.7))
library(dlstats)
ls()
dlstats::cran_stats("automultinomial")
test=dlstats::cran_stats("automultinomial")
test
test$downloads
plot(test$downloads)
test$downloads[27]
test$downloads[27]=test$downloads[27]*2
plot(test$downloads)
setwd("C:/Users/Stephen Berg/Dropbox/Research - Berg/pottsHess/pottsUtilities/")
devtools::check()
devtools::install()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rtools")
install.packages("RTools")
install.packages("RcppEigen")
getwd()
setwd("../pottsMixture/")
devtools::build()
devtools::install()
install.packages("igraph")
devtools::install()
library(pottsMixture)
library(pottsMixture)
devtools::build()
devtools::install()
install.packages("devtools")
install.packages("devtools")
getwd()
devtools::check()
library(data.table)
devtools::check()
library(pottsMixture)
library(pottsMixture)
library(pottsMixture)
devtools::install()
library(pottsMixture)
devtools::install()
install.packages("Rtools")
library(devtools)
build_github_devtools()
install.packages("rtools")
find_rtools()
install()
library(pottsMixture)
devtools::install()
devtools::install()
devtools::check()
install.packages("data.table")
install.packages("data.table")
devtools::install()
library(pottsMixture)
install()
install
devtools::build()
devtools::install()
library(pottsMixture)
R.home("bin")
normalizePath(R.home("bin"))
R.home("bin")
Sys.getenv("R_HOME")
shortPathName(R.home("bin"))
library(devtools)
debug(system)
install()
getwd()
R_system_version()
version
install.packages("devtools")
install.packages("Rcpp")
install.packages("RcppEigen")
install.packages("permute")
install.packages("pkgbuild")
install.packages("pkgbuild")
install.packages("devtools")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
install.packages("backports")
install.packages("backports")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
install.packages("processx")
install.packages("processx")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
install.packages("ps")
install.packages("ps")
install.packages("R6")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
library(pkgbuild)
find_rtools()
install.packages("pkgbuild") # pkgbuild is not available (for R version 3.5.0)
install.packages("devtools") # make sure you have the latest version from CRAN
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
library(pkgbuild) # load package
find_rtools()
remove.packages("devtools")
install.packages("pkgbuild")
install.packages("pkgbuild")
devtools::install_github("r-lib/pkgbuild")
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
install.packages("devtools") # make sure you have the latest version from CRAN
library(devtools) # load package
devtools::install_github("r-lib/pkgbuild")
unload("devtools")
library(pkgbuild)
find_rtools()
devtools::build()
library(devtools)
library(pkgbuild)
devtools::build()
library(pkgbuild)
find_rtools()
pkgbuild::build()
library(devtools)
find_rtools(debug = TRUE)
devtools::build()
devtools::build()
install.packages("pkgbuild","G:/Program Files/R/R-3.5.1/library") # pkgbuild is not available (for R version 3.5.0)
install.packages("devtools","G:/Program Files/R/R-3.5.1/library") # make sure you have the latest version from CRAN
library(devtools, lib.loc="G:/Program Files/R/R-3.5.1/library") # load package
devtools::install_github("r-lib/pkgbuild") # install updated version of pkgbuild from GitHub
library(pkgbuild, lib.loc = "G:/Program Files/R/R-3.5.1/library") # load package
find_rtools() # should be TRUE, assuming you have Rtools 3.5
install.packages("pkgbuild", "G:/Program Files/R/R-3.5.1/library")
pkgbuild::find_rtools()
pkgbuild::find_rtools(debug="FALSE")
pkgbuild::find_rtools()
pkgbuild::build()
Sys.getenv("PATH")
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
logLikeReduced/cvDependent$marginalCVLogLike
0.579*2.04
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
unNorm4k
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
norm4k
norm2k
norm1k
unNorm4k
unNorm2k
unNorm1k
cvDependent$marginalCVLogLike
load("SAEM1k_8cat_cv1_rep1.RData")
norm1k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = TRUE)
cvDependent$marginalCVLogLike
unNorm1k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = FALSE)
cvDependent$marginalCVLogLike
unNorm1k
testLogLikelihood(cvD,fitEM,normalize)
testLogLikelihood(cvD,fitEM,FALSE)
testLogLikelihood(cvDependent,fitEM,FALSE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
unNorm1k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = FALSE)
unNorm1k
cvDependent$marginalCVLogLike
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
norm1k
unNorm1k
unNorm1k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = FALSE)
testLogLikelihood(cvDependent,fitEM,normalize = FALSE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
unNorm4k
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
unNorm4k
norm4k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = TRUE)
norm4k
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
marginalLogLike<-function(cvDependent,fitEM,normalize){
n=dim(YTrain)[1]
p=dim(YTrain)[2]
predictedMeans=matrix(0,n,p)
observedMeans=matrix(0,n,p)
nonZero=which(apply(YTest,1,sum)>0)
for (i in 1:n){
observedMeans[i,]=YTest[i,]/sum(YTest[i,])
}
logLikeSaturated=0
logLikeReduced=testLogLikelihood(cvDependent,fitEM,normalize)
for (i in 1:n){
if (normalize){
logLikeSaturated=logLikeSaturated+log(dmultinom(x=YTest[i,],prob=observedMeans[i,]))
}
if (!normalize){
for (j in 1:p){
if (YTest[i,j]>0){
if (!normalize){
logLikeSaturated=logLikeSaturated+YTest[i,j]*log(observedMeans[i,j])
}
}
}
}
}
return(list(logLikeSat=logLikeSaturated,logLikeRed=logLikeReduced))
}
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
norm4k
norm4k[[1]]-norm4k[[2]]
unNorm4k[[1]]-unNorm4k[[2]]
unNorm4k
norm4k
norm4k/sum(YTest)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
norm2k
unNorm2k
load("SAEM4k_8cat_cv1_rep1.RData")
unNorm4k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = FALSE)
norm4k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = TRUE)
unNorm4k$logLikeRed/sum(YTest)
norm4k$logLikeRed/sum(YTest)
load("SAEM2k_8cat_cv1_rep1.RData")
unNorm2k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = FALSE)
norm2k=marginalLogLike(cvDependent = cvDependent,fitEM = fitEM,normalize = TRUE)
unNorm2k$logLikeRed/sum(YTest)
norm2k$logLikeRed/sum(YTest)
norm2k
cvDependent
cvDependent$marginalCVLogLike
cvDependent$pathIntegral
unNorm2k
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
unNorm1k
norm1k
norm4k
unNorm4k
qchisq(0.05,33*sum(apply(YTest,1,sum)>0))
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
cvDependent$marginalCVLogLike/sum(YTest)
sum(YTest)
sum(YTrain)
pchisq(10,10000,log.p=TRUE)
pchisq(100,10000,log.p=TRUE)
pchisq(1000,100000,log.p=TRUE)
load("SAEM4k_20cat_cv1_rep1.RData")
cvDependent$pathIntegral
load("SAEM2k_20cat_cv1_rep1.RData")
cvDependent$pathIntegral
load("SAEM1k_20cat_cv1_rep1.RData")
cvDependent$pathIntegral
cvDependent$marginalCVLogLike
load("SAEM2k_20cat_cv1_rep1.RData"
)
cvDependent$marginalCVLogLike
sum(YTrain)
sum(YTest)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
library(pottsMixture)
log(gamma(0.5))
gamma(1)
gamma(2)
gamma(3)
lgamma(0.5)
lgamma(2)
library(pottsMixture)
library(pottsMixture)
library(pottsMixture)
library(pottsMixture)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
cvDe
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
cvDependent$classificationFrequencies
source('C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/Diagnostics/diagnosticScript.R', echo=TRUE)
cvDependent$marginalCVLogLike
library(pottsMixture)
library(pottsMixture)
library(pottsMixture)
help(devtools::build)
library(devtools)
help(build)
build()
library(pottsMixture)
library(igraph)
library(raster)
library(sp)
setwd("C:/Users/Stephen Berg/Dropbox/Research - Berg/SimulationResults/PLS-Data/SpatialLattice/")
wiscShape=raster::shapefile("C:/Users/Stephen Berg/Dropbox/TreeData/Wisconsin/WI_HARN.shp")
source("makeGrid.R")
source("makeEdgeList.R")
#d1=read.csv("Survey_Points.csv")
d2=read.csv("Tree_Points.csv")
xyMat=(cbind(x=d2$Tree_X,y=d2$Tree_Y))[,]
ch <- chull(xyMat)
coords <- xyMat[c(ch, ch[1]), ]
t=Polygon(coords)
sps=Polygons(list(t),1)
sps = SpatialPolygons(list(sps))
sq_grid_c <- make_grid(sps, type = "square", cell_area =2000^2, clip = FALSE)
proj4string(sq_grid_c)<-CRS("+init=epsg:3071")
proj4string(wiscShape)<-CRS("+init=epsg:3071")
t=over(sq_grid_c,wiscShape)
inside=which(!is.na(t[,1]))
sq_grid_c=sq_grid_c[inside,]
save(sq_grid_c,file="sq_grid_cShape2k.RData")
treePoints=SpatialPoints(xyMat)
proj4string(treePoints)<-CRS("+init=epsg:3071")
inside=over(treePoints,sq_grid_c)
Y=matrix(0,length(sq_grid_c@polygons),length(unique(as.factor(d2$SP))))
d2=cbind(d2,numericSpecies=as.numeric(d2$SP))
for (i in 1:length(inside)){
Y[inside[i],d2$numericSpecies[i]]=Y[inside[i],d2$numericSpecies[i]]+1
}
edge1=makeEdgeList(sq_grid_c = sq_grid_c,max=2000)
edge1tab=data.table::as.data.table(edge1)
edge2tab=edge1tab
colnames(edge2tab)=c("V3","V2")
data.table::setkey(edge1tab,V2)
data.table::setkey(edge2tab,V2)
edge2tab=(edge1tab[edge2tab,nomatch=0,allow.cartesian=TRUE][,c(1,3)])
edge2=as.matrix(unique(edge2tab))
graph1=igraph::graph_from_edgelist(edge1,directed = TRUE)
graph1[from=V(graph1),to=V(graph1)]=1
graph2=graph_from_edgelist(edge2,directed=TRUE)
graph2[from=V(graph2),to=V(graph2)]=1
edge1=get.edgelist(graph1)
edge2=get.edgelist(graph2)
edge1=edge1[order(edge1[,1]),]-1
edge2=edge2[order(edge2[,1]),]-1
d1=degree(graph1,mode = "out")
d2=degree(graph2,mode = "out")
start1=c(0,cumsum(d1[1:(length(d1)-1)]))
end1=cumsum(d1)-1
start2=c(0,cumsum(d2[1:length(d2)-1]))
end2=cumsum(d2)-1
save(edge1,start1,end1,edge2,start2,end2,Y,file="plsLatticeObjects2kShape.RData")
library(igraph)
library(raster)
library(sp)
setwd("C:/Users/Stephen Berg/Dropbox/Research - Berg (1)/SpatialClassification/Manuscript/PLS-Data/SpatialLattice/")
wiscShape=raster::shapefile("C:/Users/Stephen Berg/Dropbox/TreeData/Wisconsin/WI_HARN.shp")
source("makeGrid.R")
source("makeEdgeList.R")
#d1=read.csv("Survey_Points.csv")
d2=read.csv("Tree_Points.csv")
xyMat=(cbind(x=d2$Tree_X,y=d2$Tree_Y))[,]
ch <- chull(xyMat)
coords <- xyMat[c(ch, ch[1]), ]
t=Polygon(coords)
sps=Polygons(list(t),1)
sps = SpatialPolygons(list(sps))
sq_grid_c <- make_grid(sps, type = "square", cell_area =2000^2, clip = FALSE)
proj4string(sq_grid_c)<-CRS("+init=epsg:3071")
proj4string(wiscShape)<-CRS("+init=epsg:3071")
t=over(sq_grid_c,wiscShape)
inside=which(!is.na(t[,1]))
sq_grid_c=sq_grid_c[inside,]
treePoints=SpatialPoints(xyMat)
proj4string(treePoints)<-CRS("+init=epsg:3071")
inside=over(treePoints,sq_grid_c)
edge1=makeEdgeList(sq_grid_c = sq_grid_c,max=2000)
edge1tab=data.table::as.data.table(edge1)
edge2tab=edge1tab
colnames(edge2tab)=c("V3","V2")
data.table::setkey(edge1tab,V2)
data.table::setkey(edge2tab,V2)
edge2tab=(edge1tab[edge2tab,nomatch=0,allow.cartesian=TRUE][,c(1,3)])
edge2=as.matrix(unique(edge2tab))
graph1=igraph::graph_from_edgelist(edge1,directed = TRUE)
graph1[from=V(graph1),to=V(graph1)]=1
graph2=graph_from_edgelist(edge2,directed=TRUE)
graph2[from=V(graph2),to=V(graph2)]=1
edge1=get.edgelist(graph1)
edge2=get.edgelist(graph2)
graph1
a1=get.adjacency(graph1)
a1
table(colsums(a1))
library(Matrix)
table(colSums(a1))
4*36083
4*36083/2
ecount(graph1)
diag(a1)=0
a1
a1=Matrix(a1,sparse=TRUE)
a1
Diag(a1)=0
a1=get.adjacency(graph1)
graph3=igraph::graph_from_adjacency_matrix(a1)
graph3[from=V(graph3),to=V(graph3)]=0
graph3=graph_from_adjacency_matrix(get.adjacency(graph3),directed=FALSE)
help("graph_from_adjacency_matrix")
graph3=graph_from_adjacency_matrix(get.adjacency(graph3),mode="directed")
ecount(graph3)
graph3=graph_from_adjacency_matrix(get.adjacency(graph3),mode="undirected")
ecount(graph3)
library(pottsMixture)
library(pottsMixture)
devtools::build()
library(pottsMixture)
devtools::build()
